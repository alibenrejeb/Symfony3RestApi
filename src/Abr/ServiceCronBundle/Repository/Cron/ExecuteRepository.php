<?php

namespace Abr\ServiceCronBundle\Repository\Cron;
use Abr\ServiceCronBundle\Entity\Cron;


/**
 * ExecuteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExecuteRepository extends \Doctrine\ORM\EntityRepository
{
    public function getQueryBuilder()
    {
        $qb = $this->createQueryBuilder('exec')
            ->join('exec.step', 'step')
            ->addSelect('step')
            ->join('step.serie', 'serie')
            ->addSelect('serie');
        return $qb;
    }

    /**
     * @return Cron\execute
     */
    public function currentExecuteReady()
    {
        if(count($this->currentExecuteInProgress()) == 0) {
            $qb = $this->getQueryBuilder();
            $qb->where('exec.status = :status')
                ->andWhere('exec.host = :host')
                ->setMaxResults(1)
                ->orderBy('exec.serieDate', 'ASC')
                ->setParameter('status', 0)
                ->setParameter('host', php_uname('n'));

            $query = $qb->getQuery();

            return (count($query->getResult()) > 0) ? $query->getResult()[0] : null;
        }

        return null;
    }

    public function currentExecuteInProgress()
    {
        $qb = $this->getQueryBuilder();
        $qb->where('exec.status = :status')
            ->andWhere('exec.host = :host')
            ->setMaxResults(1)
            ->orderBy('exec.serieDate', 'ASC')
            ->setParameter('status', 1)
            ->setParameter('host', php_uname('n'));

        $query = $qb->getQuery();

        return $query->getArrayResult();
    }
}
